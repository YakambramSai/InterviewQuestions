1)Write a function that takes an array of integers and returns the balance point. If no balance point is found, return -1.

The balance point of an array is the index in the array where the sum of the previous elements is equal to the sum of the following elements.

Where no previous or following elements exist for a specific index, then you can assume a sum of 0 for the missing elements.

For example:

A = [2, 7, 4, 5, -3, 8, 9, -1]

The balance point of A is 3

A[0] + A[1] + A[2] = 2 + 7 + 4 = 13

A[4] + A[5] + A[6] + A[7] = -3 + 8 + 9 + -1 = 13
========================================================
public class Solution {
	public static int BalancePoint(int[] input) {
		int i, j; 
        int leftsum, rightsum; 
        int n=input.length;
        for (i = 0; i < n; ++i) { 
  
            leftsum = 0;   
            for (j = 0; j < i; j++) 
                leftsum += input[j]; 
  
          
            rightsum = 0; 
            for (j = i + 1; j < n; j++) 
                rightsum += input[j]; 
  
          
            if (leftsum == rightsum) 
                return i; 
        } 
  
       
        return -1; 
	}
}


import org.junit.*;
import static org.junit.Assert.*;

public class Tests
{
	
	@Test
	public void Test1()
	{
		Solution solution = new Solution();

		assertEquals(solution.BalancePoint(new int[] { 2, 7, 4, 5, -3, 8, 9, -1 }), 3);
	}
}

===========================================================================
Given an English sentence passed as a single string, generate a ‘jumbled’ representation by sorting the characters of each word alphabetically.

The sentence may contain both capital letters and punctuation. Any capitalised characters within a word should retain their position within the word (though the character itself may change). Similarly any punctuation used should also remain in its original position.

For example, “The cat sat on the Ikea mat.” would result in “Eht act on eht Aeik amt.”

String words[]=input.split("\\s");  
    String reverseWord="";  
    for(String w:words){  
	   String s1 = w.charAt(0).toUppercase()+name.substring(1);

        StringBuilder sb=new StringBuilder(s1);  
        sb.reverse();  
        reverseWord+=sb.toString()+" ";  
    }  
    return reverseWord.trim();  
	
	
	import java.util.Arrays;
import java.lang.Character;
public class Solution {
	public static String JumbleSentence(String input) {
		String words[] = input.split("\\s");
		String reverseWord = "";
		for (String w : words) {
			w = w.replace('.', ' ');
			
			String str;
			if (Character.isUpperCase(w.charAt(0))) {
				
				StringBuilder sb = new StringBuilder(w);
				String s = sb.reverse().toString().toLowerCase();
				char strArray[] = s.toCharArray();
				Arrays.sort(strArray);
				s = new String(strArray);
				str = s.substring(0, 1).toUpperCase() + s.substring(1);
				
			}else {
				StringBuilder sb = new StringBuilder(w);
				String s = sb.reverse().toString().toLowerCase();
				char strArray[] = s.toCharArray();
				Arrays.sort(strArray);
				s = new String(strArray);
				str =  s;
			}
			
			reverseWord += str + " ";
		}
		reverseWord += ".";
		return reverseWord.trim();

	}
}


import org.junit.*;
import static org.junit.Assert.*;

public class Tests
{
	
	@Test
	public void Test1()
	{
		Solution solution = new Solution();

		assertEquals(solution.JumbleSentence("The cat sat on the Ikea mat."), "Eht act ast no eht Aeik amt.");
	}
}
	
	